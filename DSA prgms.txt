/* Linear Search */

#include<stdio.h>
int main()
{
    int n,key,i;
    printf("Enter size of array\n");
    scanf("%d",&n);
    int arr[n];
    printf("Enter array elements\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    printf("Enter element to search\n");
    scanf("%d",&key);
    for(i=0;i<n;i++)
    {
        if(arr[i]==key)
        {
            printf("Element %d is found at position %d\n",key,i+1);
            return 0;
        }
    }
    printf("Element %d is not found\n",key);
    return 0;
}


output:
Enter size of array
5
Enter array elements
1
2
3
4
5
Enter element to search
3
Element 3 is found at position 3

Enter size of array
5
Enter array elements
1
2
3
4
5
Enter element to search
6
Element 6 is not found


/* Binary Search */

#include<stdio.h>
void sort(int arr[],int n)
{
    int i,j,temp;
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(arr[i]>arr[j])
            {
                temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
    }
}
int BS(int arr[],int low,int high,int key)
{
    while(low<=high)
    {
        int mid;
        mid=(low+high)/2;
        if(arr[mid]==key)
        {
            return 1;
        }
        else if(key<arr[mid])
        {
            high=mid-1;
        }
        else if(key>arr[mid])
        {
            low=mid+1;
        }
    }
    return 0;
}
int main()
{
    int n,key,i,sol;
    printf("Enter size of array\n");
    scanf("%d",&n);
    int arr[n];
    printf("Enter array elements\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    printf("Enter element to search\n");
    scanf("%d",&key);
    sort(arr,n);
    sol=BS(arr,0,n-1,key);
    if(sol==0)
    {
        printf("Element %d is not found\n",key);
    }
    else
    {
        printf("Element %d is found\n",key);
    }
    return 0;
}



output:
Enter size of array
5
Enter array elements
23
56
89
12
45
Enter element to search
23
Element 23 is found

Enter size of array
5
Enter array elements
23
56
89
12
45
Enter element to search
20
Element 20 is not found


/* Quick Sort */

#include<stdio.h>
void interchange(int arr[],int i,int j)
{
    int p;
    p=arr[i];
    arr[i]=arr[j];
    arr[j]=p;
}
int partition(int arr[],int p,int q)
{
    int v,i,j;
    v=arr[p];
    i=p;
    j=q;
    while(i<j)
    {
        while(arr[i]<=v)
        {
            i=i+1;
        }
        while(arr[j]>v)
        {
            j=j-1;
        }
        if(i<j)
        {
            interchange(arr,i,j);
        }
    }
    arr[p]=arr[j];
    arr[j]=v;
    return j;
}
void QS(int arr[],int low,int high)
{
    int j;
    if(low<high)
    {
        j=partition(arr,low,high);
        QS(arr,low,j-1);
        QS(arr,j+1,high);
    }
}
int main()
{
    int n,arr[20],i;
    printf("Enter array size\n");
    scanf("%d",&n);
    printf("Enter array elements\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    printf("Before Sorting array\n");
    for(i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }
    QS(arr,0,n-1);
    printf("\nAfter Sorting array\n");
    for(i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }
}

Output:
Enter array size
10
Enter array elements
26
5
37
1
61
11
59
15
48
19
Before Sorting array
26 5 37 1 61 11 59 15 48 19 
After Sorting array
1 5 11 15 19 26 37 48 59 61


/* Merge Sort */

#include<stdio.h>
void merge(int arr[],int low,int mid,int high)
{
    int h,i,j,b[20],k;
    h=low;
    i=low;
    j=mid+1;
    while((h<=mid)&&(j<=high))
    {
        if(arr[h]<=arr[j])
        {
            b[i]=arr[h];
            h=h+1;
        }
        else
        {
            b[i]=arr[j];
            j=j+1;
        }
        i=i+1;
    }
    if(h>mid)
    {
        for(k=j;k<=high;k++)
        {
            b[i]=arr[k];
            i=i+1;
        }
    }
    else
    {
        for(k=h;k<=mid;k++)
        {
            b[i]=arr[k];
            i=i+1;
        }
    }
    for(k=low;k<=high;k++)
    {
        arr[k]=b[k];
    }
}
void MS(int arr[],int low,int high)
{
    int mid;
    if(low<high)
    {
        mid=(low+high)/2;
        MS(arr,low,mid);
        MS(arr,mid+1,high);
        merge(arr,low,mid,high);
    }
}
int main()
{
    int n,arr[20],i;
    printf("Enter array size\n");
    scanf("%d",&n);
    printf("Enter array elements\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    printf("Before Sorting array\n");
    for(i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }
    MS(arr,0,n-1);
    printf("\nAfter Sorting array\n");
    for(i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }
}

Output:
Enter array size
10
Enter array elements
310
285
179
652
351
423
861
254
550
520
Before Sorting array
310 285 179 652 351 423 861 254 550 520 
After Sorting array
179 254 285 310 351 423 520 550 652 861

/* Strassen's matrix multiplication */

import numpy as np

def split(matrix):
	row, col = matrix.shape
	row2, col2 = row//2, col//2
	return matrix[:row2, :col2], matrix[:row2, col2:], matrix[row2:, :col2], matrix[row2:, col2:]

def strassen(x, y):
	
	if len(x) == 1:
		return x * y

	
	a, b, c, d = split(x)
	e, f, g, h = split(y)

	
	p1 = strassen(a, f - h)
	p2 = strassen(a + b, h)
	p3 = strassen(c + d, e)
	p4 = strassen(d, g - e)
	p5 = strassen(a + d, e + h)
	p6 = strassen(b - d, g + h)
	p7 = strassen(a - c, e + f)

	
	c11 = p5 + p4 - p2 + p6
	c12 = p1 + p2
	c21 = p3 + p4
	c22 = p1 + p5 - p3 - p7

	c = np.vstack((np.hstack((c11, c12)), np.hstack((c21, c22))))

	return c
A=[[1,1,1,1],[2,2,2,2],[3,3,3,3],[2,2,2,2]]
A=np.array(A)
B=[[1,1,1,1],[2,2,2,2],[3,3,3,3],[2,2,2,2]]
B=np.array(B)
C=strassen(A,B)
print(C)

Output:
[[ 8  8  8  8]
 [16 16 16 16]
 [24 24 24 24]
 [16 16 16 16]]



/* Knapsack problem */

#include<stdio.h>
#include<stdlib.h>

void MS(float arr[], int p[], int w[], int n)
{
    int i,j,tev;
    float temp;
    for(i=1;i<=n;i++)
    {
        for(j=i+1;j<=n;j++)
        {
            if(arr[i]<arr[j])
            {
                temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
                tev=p[i];
                p[i]=p[j];
                p[j]=tev;
                tev=w[i];
                w[i]=w[j];
                w[j]=tev;
            }
        }
    }
}


void greedyknapsack(int m,int n,int p[n],int w[n])
{
	float x[n],profit,p_w[n];
	int i,j,d;
	for(j=1;j<n+1;j++)
		p_w[j]=(float)p[j]/w[j];
	for(j=1;j<n+1;j++)
		x[j]=0.0;
    	MS(p_w,p,w,n);
    	d=1;
	do{
		if(w[d]>m)
			break;
		else{
			x[d]=1.0;
			m=m-w[d];
		}
		d++;
	}while(d!=n);
	if(d<=n)
		x[d]=(float)m/w[d];
	profit=0.0;
	d=1;
	do{
		profit+=p[d]*x[d];
		d++;
	}while(d!=n);
	printf("\nTotal profit = %f\n",profit);
	
}

int main()
{
	int n,m,i,j;
	printf("Enter no.of elements\n");
	scanf("%d",&n);
	printf("Enter capacity of bag\n");
	scanf("%d",&m);
	int p[n];
	int w[n];
	printf("Enter profits\n");
	for(i=1;i<n+1;i++)
		scanf("%d",&p[i]);
	printf("Enter weights\n");
	for(i=1;i<n+1;i++)
		scanf("%d",&w[i]);
	printf("given profits are\n");
	for(i=1;i<n+1;i++)
		printf("%d\t",p[i]);
	printf("\ngiven weights are\n");
	for(i=1;i<n+1;i++)
		printf("%d\t",w[i]);
	greedyknapsack(m,n,p,w);
	
}

Output:
Enter no.of elements
3
Enter capacity of bag
20
Enter profits
25
24
15
Enter weights
18
15
10
given profits are
25      24      15
given weights are
18      15      10
Total profit = 31.500000



/* Job sequencing deadlines */

def printJobScheduling(arr, t):
	n = len(arr)
	for i in range(n):
		for j in range(n - 1 - i):
			if arr[j][2] < arr[j + 1][2]:
				arr[j], arr[j + 1] = arr[j + 1], arr[j]
	result = [False] * t
	job = ['-1'] * t
	for i in range(len(arr)):
		for j in range(min(t - 1, arr[i][1] - 1), -1, -1):
			if result[j] is False:
				result[j] = True
				job[j] = arr[i][0]
				break
	print(job)
if __name__ == '__main__':
  arr = [['a', 2, 100],['b', 1, 19],['c', 2, 27],['d', 1, 25],['e', 3, 15]]
  print("Following is maximum profit sequence of jobs")
  t=arr[0][1]
  for i in range(1,len(arr)):
    if t<arr[i][1]:
      t=arr[i][1]	
  printJobScheduling(arr, t)

Output:
Following is maximum profit sequence of jobs
['c', 'a', 'e']


/* Prim's */

import sys
class Graph():
  def __init__(self, vertices):
    self.V = vertices
    self.graph = [[0 for column in range(vertices)]for row in range(vertices)]	
  def printMST(self, parent):
   print("Edge \tWeight")
   tweight=0
   for i in range(1, self.V):
    tweight+=self.graph[i][parent[i]]
    print(parent[i], "-", i, "\t", self.graph[i][parent[i]])
   print("Min cost", tweight)
  def minKey(self, key, mstSet):		
    min = sys.maxsize
    for v in range(self.V):
      if key[v] < min and mstSet[v] == False:
        min = key[v]
        min_index = v
    return min_index	
  def primMST(self):		
    key = [sys.maxsize] * self.V
    parent = [None] * self.V 
    key[0] = 0
    mstSet = [False] * self.V
    parent[0] = -1 
    for cout in range(self.V):
      u = self.minKey(key, mstSet)
      mstSet[u] = True
      for v in range(self.V):
        if self.graph[u][v] > 0 and mstSet[v] == False and key[v] > self.graph[u][v]:
          key[v] = self.graph[u][v]
          parent[v] = u
    self.printMST(parent)
if __name__ == '__main__':
	g = Graph(5)
	g.graph = [[0, 2, 0, 6, 0],
			[2, 0, 3, 8, 5],
			[0, 3, 0, 0, 7],
			[6, 8, 0, 0, 9],
			[0, 5, 7, 9, 0]]

	g.primMST()

Output:
Edge 	Weight
0 - 1 	 2
1 - 2 	 3
0 - 3 	 6
1 - 4 	 5
Min cost 16


/* Krushkal's */

class Graph:
	def __init__(self, vertices):
		self.V = vertices
		self.graph = []
	def addEdge(self, u, v, w):
		self.graph.append([u, v, w])
	def find(self, parent, i):
		if parent[i] != i:
			parent[i] = self.find(parent, parent[i])
		return parent[i]
	def union(self, parent, rank, x, y):
		if rank[x] < rank[y]:
			parent[x] = y
		elif rank[x] > rank[y]:
			parent[y] = x
		else:
			parent[y] = x
			rank[x] += 1

	def KruskalMST(self):
		result = []
		i = 0
		e = 0
		self.graph = sorted(self.graph,key=lambda item: item[2])
		parent = []
		rank = []
		for node in range(self.V):
			parent.append(node)
			rank.append(0)
		while e < self.V - 1:
			u, v, w = self.graph[i]
			i = i + 1
			x = self.find(parent, u)
			y = self.find(parent, v)
			if x != y:
				e = e + 1
				result.append([u, v, w])
				self.union(parent, rank, x, y)
		minimumCost = 0
		print("Edges in the constructed MST")
		for u, v, weight in result:
			minimumCost += weight
			print("%d -- %d == %d" % (u, v, weight))
		print("Minimum Spanning Tree", minimumCost)
if __name__ == '__main__':
	g = Graph(4)
	g.addEdge(0, 1, 10)
	g.addEdge(0, 2, 6)
	g.addEdge(0, 3, 5)
	g.addEdge(1, 3, 15)
	g.addEdge(2, 3, 4)
	g.KruskalMST()


Output:
Edges in the constructed MST
2 -- 3 == 4
0 -- 3 == 5
0 -- 1 == 10
Minimum Spanning Tree 19


/* Dijkstra's algorithm */

import sys
class Graph():
	def __init__(self, vertices):
		self.V = vertices
		self.graph = [[0 for column in range(vertices)]
					for row in range(vertices)]
	def printSolution(self, dist):
		print("Vertex \tDistance from Source")
		for node in range(self.V):
			print(node, "\t", dist[node])
	def minDistance(self, dist, sptSet):
		min = sys.maxsize
		for u in range(self.V):
			if dist[u] < min and sptSet[u] == False:
				min = dist[u]
				min_index = u
		return min_index
	def dijkstra(self, src):
		dist = [sys.maxsize] * self.V
		dist[src] = 0
		sptSet = [False] * self.V
		for cout in range(self.V):
			x = self.minDistance(dist, sptSet)
			sptSet[x] = True
			for y in range(self.V):
				if self.graph[x][y] > 0 and sptSet[y] == False and \
						dist[y] > dist[x] + self.graph[x][y]:
					dist[y] = dist[x] + self.graph[x][y]
		self.printSolution(dist)


if __name__ == "__main__":
	g = Graph(9)
	g.graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0],
			[4, 0, 8, 0, 0, 0, 0, 11, 0],
			[0, 8, 0, 7, 0, 4, 0, 0, 2],
			[0, 0, 7, 0, 9, 14, 0, 0, 0],
			[0, 0, 0, 9, 0, 10, 0, 0, 0],
			[0, 0, 4, 14, 10, 0, 2, 0, 0],
			[0, 0, 0, 0, 0, 2, 0, 1, 6],
			[8, 11, 0, 0, 0, 0, 1, 0, 7],
			[0, 0, 2, 0, 0, 0, 6, 7, 0]
			]

	g.dijkstra(0)

Output:
Vertex 	Distance from Source
0 	 0
1 	 4
2 	 12
3 	 19
4 	 21
5 	 11
6 	 9
7 	 8
8 	 14



/* Naive string matching */

def search_pattern(pattern, text):
    m = len(pattern)
    n = len(text)

    
    for i in range(n - m + 1):
        j = 0
        while j < m and text[i + j] == pattern[j]:
            j += 1
        if j == m:
            print(f"Pattern found at index {i}")

if __name__ == "__main__":
    text1 = "AABAACAADAABAABA"
    pattern1 = "AABA"
    print("Example 1:")
    search_pattern(pattern1, text1)
    
    text2 = "agd"
    pattern2 = "g"
    print("\nExample 2:")
    search_pattern(pattern2, text2)

Output:
Pattern found at index 0 
Pattern found at index 9 
Pattern found at index 13 


/* Rabin karp algorithm */

d = 256
def search(pat, txt, q):
	M = len(pat)
	N = len(txt)
	i = 0
	j = 0
	p = 0 
	t = 0 
	h = 1
	for i in range(M-1):
		h = (h*d) % q

	for i in range(M):
		p = (d*p + ord(pat[i])) % q
		t = (d*t + ord(txt[i])) % q

	for i in range(N-M+1):
		if p == t:
			for j in range(M):
				if txt[i+j] != pat[j]:
					break
				else:
					j += 1

			if j == M:
				print("Pattern found at index " + str(i))
		if i < N-M:
			t = (d*(t-ord(txt[i])*h) + ord(txt[i+M])) % q
			if t < 0:
				t = t+q


if __name__ == '__main__':
	txt = "GEEKS FOR GEEKS"
	pat = "GEEK"
	q = 101
	search(pat, txt, q)

Output:
Pattern found at index 0
Pattern found at index 10